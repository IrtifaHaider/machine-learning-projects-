## 1. Import Libraries

# Suppress Warnings
import warnings
warnings.filterwarnings('ignore')

# Import essential libraries
import numpy as np
import pandas as pd

# Visualization libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Linear Regression model and metrics
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
 

## 2. Load the Dataset
```python
df = pd.read_csv("advertising.csv")
df
```

- Load the dataset from `advertising.csv`.

### Dataset Shape
```python
df.shape
```

- Displays the number of rows and columns in the dataset.

### Descriptive Statistics
```python
df.describe()
```

- Provides summary statistics like mean, min, and max values.

---

## 3. Check for Missing Values
```python
df.isnull().sum() * 100 / df.shape[0]
```

- Checks if there are any missing values. If the result is 0, the dataset is clean.

---

## 4. Visualize Outliers Using Boxplots
```python
fig, axs = plt.subplots(3, figsize=(5, 5))
sns.boxplot(df['TV'], ax=axs[0])
sns.boxplot(df['Newspaper'], ax=axs[1])
sns.boxplot(df['Radio'], ax=axs[2])
plt.tight_layout()
```

- Detects outliers for `TV`, `Newspaper`, and `Radio` columns using boxplots.

---

## 5. Scatter Plot for Sales vs Media Channels
```python
plt.scatter(df['TV'], df['Sales'], label='TV')
plt.scatter(df['Radio'], df['Sales'], label='Radio')
plt.scatter(df['Newspaper'], df['Sales'], label='Newspaper')
plt.xlabel('Advertising Mediums')
plt.ylabel('Sales')
plt.title('Advertising Mediums vs Sales')
plt.legend()
plt.show()
```

- Plots the relationships between sales and the three advertising mediums.

---

## 6. Pairplot to Visualize Correlations
```python
sns.pairplot(df, x_vars=['TV', 'Radio', 'Newspaper'], y_vars='Sales', height=4, kind='scatter')
plt.show()
```

- Uses a pairplot to visualize relationships between variables.

---

## 7. Correlation Heatmap
```python
sns.heatmap(df.corr(), annot=True, cmap='YlGnBu')
plt.show()
```

- Displays the correlation between variables using a heatmap.

---

## 8. Prepare Data for Linear Regression
```python
reg = LinearRegression()
x = df[['TV']]  # Feature
s = df[['Sales']]  # Target
```

- Selects `TV` as the independent feature and `Sales` as the target variable.

---

## 9. Train the Linear Regression Model
```python
reg.fit(x, s)
```

- Trains the linear regression model on the feature (`TV`) and target (`Sales`).

---

## 10. Retrieve Model Parameters (Coefficient & Intercept)
```python
m = reg.coef_
c = reg.intercept_
print(f"Slope: {m}, Intercept: {c}")
```

- Retrieves the **slope** and **intercept** of the regression line.

---

## 11. Make Predictions Using the Model
```python
prediction = reg.predict([[177]])  # Predict for TV spend = 177
print(f"Predicted Sales: {prediction}")
```

- Predicts the sales for a TV advertisement budget of 177 units.

---

## 12. Add Predictions to the DataFrame
```python
df['Predicted_Y'] = reg.predict(x)
df.head()
```

- Adds the predicted sales to the DataFrame.

---

## 13. Calculate Residuals (Loss)
```python
df['lose'] = df['Sales'] - df['Predicted_Y']
df.head()
```

- Calculates the residual (difference between actual and predicted sales).

---

## 14. Evaluate the Model (MSE & MAE)
```python
mse = mean_squared_error(df['Sales'], df['Predicted_Y'])
mae = mean_absolute_error(df['Sales'], df['Predicted_Y'])
print(f"MSE: {mse}, MAE: {mae}")
```

- **MSE** (Mean Squared Error): Measures the average squared error.
- **MAE** (Mean Absolute Error): Measures the average magnitude of the errors.

---

## 15. Visualize the Regression Line
```python
plt.plot(x, reg.predict(x), color='red', label='Regression Line')
plt.scatter(df['TV'], df['Sales'], label='Actual Data')
plt.xlabel('TV')
plt.ylabel('Sales')
plt.title('TV vs Sales Regression')
plt.legend()
plt.show()
```

- Plots the regression line along with the actual data points.

---

## 16. Calculate R² Score
```python
from sklearn.metrics import r2_score
r2 = r2_score(df['Sales'], df['Predicted_Y'])
print(f"R² Score: {r2}")
```

- **R² Score**: Represents how well the regression model explains the variance in the data.

---

## Conclusion

This notebook demonstrates a simple linear regression model to predict sales based on TV advertising budgets. Key concepts covered include:

- Data exploration and visualization
- Model training and prediction
- Model evaluation using MSE, MAE, and R² score

```

---
